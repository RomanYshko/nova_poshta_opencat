<?xml version="1.0" encoding="utf-8"?>
	<modification>
		<name>Shipping Data for OrderPro</name>
		<code>SD OrderPro</code>
		<version>2.0.0</version>
		<author>Prorab337</author>
		<link>https://oc-max.com</link>
		
		<file path="admin/controller/sale/orderpro.php">
    		<operation>
    			<search><![CDATA[$data['heading_title'] = $this->language->get('heading_title');]]></search>
    			<add position="after"><![CDATA[
    				/* START Shipping Data */
					if ($this->config->get('config_secure')) {
						$url = HTTPS_CATALOG;
					} else {
						$url = HTTP_CATALOG;
					}

					$this->document->addStyle($url . 'catalog/view/theme/default/stylesheet/shippingdata.css');

					$data['sait_url'] = $url;
					/* END Shipping Data */
        		]]></add>
    		</operation>
  		</file>

		<file path="admin/view/template/sale/orderpro_list.tpl">
			<operation>
				<search><![CDATA[<?php echo $footer; ?>]]></search>
				<add position="before"><![CDATA[
					<!-- START Shipping Data -->
					<style>
						.btn-novaposhta {
							color: #333;
							background-color: #ff392e;
							border-color: #ccc;
						}
						.btn-light-novaposhta {
							color: #333;
							background-color: #fff;
							border-color: #ff392e;
						}
						.btn-ukrposhta {
							color: #333;
							background-color: #ffce2f;
							border-color: #ccc;
						}
						.btn-light-ukrposhta {
							color: #333;
							background-color: #fff;
							border-color: #ffce2f;
						}
					</style>
					<!-- START Modal assignment CN to order -->
					<div class="modal fade" id="assignment-cn-to-order" tabindex="-1" role="dialog" aria-labelledby="assignment-cn-to-order-label">
						<div class="modal-dialog" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
									<h4 class="modal-title" id="assignment-cn-to-order-label"><?php echo $heading_cn; ?></h4>
								</div>
								<div class="modal-body">
									<div class="form-group clearfix">
										<input type="hidden" name="cn_order_id" value="" id="cn_order_id" />
										<input type="hidden" name="cn_shipping_method" value="" id="cn_shipping_method" />
										<label class="col-sm-2 control-label" for="cn_number"><?php echo $entry_cn_number; ?></label>
										<div class="col-sm-10">
											<input type="text" name="cn_number" value="" placeholder="<?php echo $entry_cn_number; ?>" id="cn_number" class="form-control" />
										</div>
									</div>
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-primary" onclick="assignmentCN();"><i class="fa fa-check"></i></button>
									<button type="button" class="btn btn-default" data-dismiss="modal"><i class="fa fa-times"></i></button>
								</div>
							</div>
						</div>
					</div>
					<!-- END Modal assignment CN to order -->

					<script type="text/javascript"><!--
					function deleteCN(self, shipping_method) {
						var post_data = 'order_id=' + $(self).parents('tr').find('input[name^="selected"]').val();
							$.ajax( {
								url: 'index.php?route=extension/shipping/' + shipping_method + '/deleteCNFromOrder&token=<?php echo $token; ?>',
								type: 'POST',
								data: post_data,
								dataType: 'json',
								beforeSend: function () {
									$('body').fadeTo('fast', 0.7).prepend('<div id="ocmax-loader" style="position: fixed; top: 50%;	left: 50%; z-index: 9999;"><i class="fa fa-spinner fa-spin fa-3x fa-fw"></i></div>');
								},
								complete: function () {
									var $alerts = $('.alert-danger, .alert-success');

									if ($alerts.length !== 0) {
										setTimeout(function() { $alerts.fadeOut(); }, 5000);
									}

									$('body').fadeTo('fast', 1)
									$('#ocmax-loader').remove();
								},
								success: function(json) {
									if(json['error']) {
										$('.container-fluid:eq(1)').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');
									}

									if (json['success']) {
										$('.container-fluid:eq(1)').prepend('<div class="alert alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');

										setTimeout(function() { location.reload(); }, 2000);
									}

									$('html, body').animate({ scrollTop: 0 }, 'slow');
								},
								error: function (jqXHR, textStatus, errorThrown) {
									console.log(textStatus);
								}
							} );
						}

						function assignmentCN(self, shipping_method) {
							if (typeof(self) !== 'undefined') {
								$('#cn_order_id').val($(self).parents('tr').find('input[name^="selected"]').val());
							}

							if (shipping_method) {
								$('#cn_shipping_method').val(shipping_method);
							}

							if ($('#assignment-cn-to-order').is(':hidden')) {
								$('#assignment-cn-to-order').modal('show');
							} else {
								var post_data = 'order_id=' + $('#cn_order_id').val() + '&cn_number=' + $('#cn_number').val();

								$.ajax( {
									url: 'index.php?route=extension/shipping/' + $('#cn_shipping_method').val() + '/addCNToOrder&token=<?php echo $token; ?>',
									type: 'POST',
									data: post_data,
									dataType: 'json',
									beforeSend: function () {
										$('body').fadeTo('fast', 0.7).prepend('<div id="ocmax-loader" style="position: fixed; top: 50%;	left: 50%; z-index: 9999;"><i class="fa fa-spinner fa-spin fa-3x fa-fw"></i></div>');
									},
									complete: function () {
										var $alerts = $('.alert-danger, .alert-success');

										if ($alerts.length !== 0) {
											setTimeout(function() { $alerts.fadeOut(); }, 5000);
										}

										$('body').fadeTo('fast', 1)
										$('#ocmax-loader').remove();
									},
									success: function(json) {
										if(json['error']) {
											$('.container-fluid:eq(1)').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');
										}

										if (json['success']) {
											$('.container-fluid:eq(1)').prepend('<div class="alert alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');

											setTimeout(function() { location.reload(); }, 2000);
										}

										$('html, body').animate({ scrollTop: 0 }, 'slow');
									},
									error: function (jqXHR, textStatus, errorThrown) {
										console.log(textStatus);
									}
								} );

								$('#assignment-cn-to-order').modal('hide');
							}
						}

						$(function() {
							var post_data = $('input[name^="selected"]');

							$.ajax( {
								url: 'index.php?route=sale/order/getShippingData&token=<?php echo $token; ?>',
								type: 'POST',
								data: post_data,
								dataType: 'json',
								success: function(json) {
									if(json['error']) {
										$('.container-fluid:eq(1)').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');

										$('html, body').animate({ scrollTop: 0 }, 'slow');
									}

									if (json instanceof Object) {
										if (json['shipping_methods']) {
											var btn_l = '<div class="btn-group"><button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-list-ul"></i> <span class="caret"></span></button><ul class="dropdown-menu dropdown-menu-right">';

											for (var i in json['shipping_methods']) {
												btn_l += '<li class="dropdown-header">' + json['shipping_methods'][i]['heading'] + '</li>';

												if (json['shipping_methods'][i]['cn_list']) {
													btn_l += '<li><a href="' + json['shipping_methods'][i]['cn_list']['href'] + '">' + json['shipping_methods'][i]['cn_list']['text'] + '</a></li>';
												}

												btn_l += '<li role="separator" class="divider"></li>';
											}

											btn_l += '</ul></div> ';

											$('div.container-fluid div.pull-right:last').prepend(btn_l);
										}

										for (var i in json['orders']) {
											var
												c       = 0,
												f       = false,
												b_class = '',
												btn_o   = '<div class="btn-group"><button type="button" id="button-cn-' + i + '" class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-file-text-o" aria-hidden="true"></i> <span class="caret"></span></button><ul class="dropdown-menu dropdown-menu-right">';

											btn_o += '<li class="dropdown-header">' + json['heading_cn'] + '</li>';
											btn_o += '<li role="separator" class="divider"></li>';

											for (var ii in json['orders'][i]) {
												c++;

												btn_o += '<li class="dropdown-header">' + json['shipping_methods'][ii]['heading'] + '</li>';

												if (json['orders'][i][ii]['create']) {
													btn_o += '<li><a href="' + json['orders'][i][ii]['create']['href'] + '">' + json['orders'][i][ii]['create']['text'] + '</a></li>';
												}

												if (json['orders'][i][ii]['edit']) {
													f = true;
													btn_o += '<li><a href="' + json['orders'][i][ii]['edit']['href'] + '">' + json['orders'][i][ii]['edit']['text'] + '</a></li>';
												}

												if (json['orders'][i][ii]['delete']) {
													f = true;
													btn_o += '<li><a style="cursor: pointer;" onclick="deleteCN(this, \'' + ii + '\');">' + json['orders'][i][ii]['delete']['text'] + '</a></li>';
												}

												if (json['orders'][i][ii]['assignment']) {
													btn_o += '<li><a style="cursor: pointer;" onclick="assignmentCN(this, \'' + ii + '\');">' + json['orders'][i][ii]['assignment']['text'] + '</a></li>';
												}

												btn_o += '<li role="separator" class="divider"></li>';

												if (f) {
													b_class = 'btn-' + ii;

													continue;
												} else {
													b_class = 'btn-light-' + ii;
												}
											}

											btn_o += '</ul></div> ';

											$('input[value="' + i + '"]').parents('tr').find('td:last').prepend(btn_o);

											if (c != 1) {
												if (f) {
													b_class = 'btn-info';
												} else {
													b_class = 'btn-default';
												}
											}

											$('input[value="' + i + '"]').parents('tr').find('[id^="button-cn"]').addClass(b_class);
										}
									}
								},
								error: function (jqXHR, textStatus, errorThrown) {
									console.log(textStatus);
								}
							} );
						} );
					//--></script>
					<!-- END Shipping Data -->
				]]></add>
			</operation>
		</file>
  		
  		<file path="admin/view/template/sale/orderpro/order_form.tpl">
    		<operation>
    			<search><![CDATA[<?php echo $footer; ?>]]></search>
    			<add position="before"><![CDATA[
					<!-- START Shipping Data -->
					<script type="text/javascript"><!--
						// Autocomplete for shipping addresses
						(function ($) {
							var methods = {
								init: function (options) {
									return this.each(function () {
										var $this = $(this);
										var data = $this.data('autocompleteAddress');

										// If the plugin is not yet initialized
										if (!data) {
											$this.timer = null;
											$this.items = new Array();

											$.extend($this, options);

											$this.attr('autocomplete', 'new-password');

											// Focus
											$this.on('focus.autocompleteAddress', function () {
												$this.request('');
											} );

											// Blur
											$this.on('blur.autocompleteAddress', function () {
												setTimeout(function (object) {
													object.hide();
												}, 200, $this);
											} );

											// Keydown
											$this.on('keydown.autocompleteAddress', function (event) {
												switch (event.keyCode) {
													case 27: // escape
														$this.hide();
														break;
													default:
														$this.request();
														break;
												}
											} );

											// Click
											$this.click = function (event) {
												event.preventDefault();

												var value = $(event.target).parent().attr('data-value');

												if (value && $this.items[value]) {
													$this.select($this.items[value]);
												}
											}

											// Show
											$this.show = function () {
												var pos = $this.position();

												$this.siblings('ul.' + $this.class).css({
													'top': pos.top + $this.outerHeight(),
													'left': pos.left
												});

												$this.siblings('ul.' + $this.class).show();
											}

											// Hide
											$this.hide = function () {
												$this.siblings('ul.' + $this.class).hide();
											}

											// Request
											$this.request = function (search) {
												clearTimeout($this.timer);

												$this.timer = setTimeout(function (object) {
													search = (typeof(search) === 'undefined') ? object.val() : search;

													object.source(search, $.proxy(object.response, object));
												}, 200, $this);
											}

											// Response
											$this.response = function (json) {
												var html = '';

												if (json.length) {
													for (i = 0; i < json.length; i++) {
														this.items[json[i]['value']] = json[i];

														html += '<li data-value="' + json[i]['value'] + '"><a href="#">' + json[i]['label'] + '</a></li>';
													}
												}

												if (html && $this.is(':focus')) {
													$this.show();
												} else {
													$this.hide();
												}

												$this.siblings('ul.' + $this.class).html(html);
											}

											$this.after('<ul class="' + $this.class + '"></ul>');
											$this.siblings('ul.' + $this.class).delegate('a', 'click', $.proxy($this.click, $this));
											$this.data('autocompleteAddress', true);
										}
									} );
								},
								destroy: function () {
									return this.each(function () {
										var $this = $(this);

										$this.removeData('autocompleteAddress');

										$this.off('.autocompleteAddress');
									} );
								}
							};

							$.fn.autocompleteAddress = function (method) {
								if (methods[method]) {
									return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
								} else if (typeof (method) === 'object' || !method) {
									return methods.init.apply(this, arguments);
								} else {
									$.error('Method "' + method + '" does not exist for jQuery.autocompleteAddress');
								}
							}
						} )(window.jQuery);

						// ShippingData object
						function ShippingData() {
							var self = this;
							var src, method, lang;

							self.methods_city = [
								'novaposhta.warehouse',
								'novaposhta.doors',
								'novaposhta.poshtomat',
								'justin.department'
							];

							self.methods_address = [
								'novaposhta.warehouse',
								'novaposhta.poshtomat',
								'justin.department'
							];

							self.setProp = function () {
								self.method = $('input[name="shipping_code"]').val();

								self.lang = $('html').attr('lang') || 'ru';
							}

							self.handlerChanges = function (name, value) {
								if ($.inArray(self.method, self.methods_city.concat(self.methods_address)) != - 1) {
									if (name.match(/zone/i)) {
										$('input[name*="city"]:visible').val('');
										$('input[name*="address_1"]:visible').val('');
									} else if (name.match(/city/i)) {
										$('input[name*="address_1"]:visible').val('');
									} else if (name.match(/shipping\_method/i)) {
										$('input[name*="city"]:visible').autocompleteAddress('destroy');
										$('input[name*="address_1"]:visible').val('').autocompleteAddress('destroy');

										self.method = value;
									}
								} else if ($.inArray(value, self.methods_city.concat(self.methods_address)) != - 1) {
									if (name.match(/shipping\_method/i)) {
										$('input[name*="city"]:visible').val('');
										$('input[name*="address_1"]:visible').val('');

										self.method = value;
									}
								}
							}

							self.getAddress = function (element, search) {
								var filter, action;

								if (element[0].name.match(/city/i)) {
									action = 'getCities';
									filter = $('[name*="zone"]:visible').val() || '';
								} else if (element[0].name.match(/address_1/i) && self.method == 'novaposhta.poshtomat') {
									action = 'getPoshtomats';
									filter = $('[name*="city"]:visible').val();
								} else if (element[0].name.match(/address_1/i)) {
									action = 'getDepartments';
									filter = $('[name*="city"]:visible').val();
								}

								if (!search) {
									search = element[0].value;
								}

								return $.ajax( {
									url: '<?php echo $sait_url; ?>index.php?route=extension/module/shippingdata/getShippingData',
									type: 'POST',
									data: 'shipping=' + self.method + '&action=' + action + '&filter=' + encodeURIComponent(filter) + '&search=' + encodeURIComponent(search),
									dataType: 'json',
									global: false,
									success: function (json) {
										self.src = json;
									}
								} );
							}
						}

						// DOOM loaded
						$(function () {
							var shippingData = new ShippingData();

							// Settings properties after DOOM load
							shippingData.setProp();

							// Settings properties after ajaxStop
							$(document).ajaxStop(function () {
								shippingData.setProp();
							} );

							// Check changes
							$(document).on('change', '[name*="shippings"]', function (e) {
								shippingData.handlerChanges('shipping_method', $('input[name="shipping_code"]').val());
							});

							// Add autocomplete for address
							$('body').on('focus', 'input[name*="city"]:visible, input[name*="address_1"]:visible', function () {
								if (this.name.match(/city/i) && $.inArray(shippingData.method, shippingData.methods_city) != - 1 || this.name.match(/address_1/i) && $.inArray(shippingData.method, shippingData.methods_address) != - 1) {
									$(this).autocompleteAddress( {
										source: function (request, response) {
											shippingData.getAddress(this, request).done(function () {
												response($.map(shippingData.src, function (item) {
													return {
														label: item['description'],
														value: item['description']
													}
												} ));
											} );
										},
										select: function (e) {
											if (e.value != this.val()) {
												this.val(e.value).trigger('change');
											}
										},
										class: 'dropdown-address'
									} );
								}
							} );
						} );
					//--></script>
					<!-- END Shipping Data -->
        		]]></add>
    		</operation>
  		</file>
  
	</modification> 